#include "Player.h"
#include "Parser.h"
#include "REParser.h"

void Player::replay(Parser & parser) {
	REParser & reparser=parser.reparser;
	FA::StatePair p0(reparser.rerange(0, 65533));
	parser.include("\"Parser_inc.h\"");
	parser.include("\"Parser.h\"");
	parser.setOption("TokenInfoType", "TokenInfo", 0);
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p1(reparser.rerange(32, 32));
	FA::StatePair p2(reparser.rerange(10, 10));
	FA::StatePair p3(reparser.reunion(p1, p2));
	FA::StatePair p4(reparser.rerange(13, 13));
	FA::StatePair p5(reparser.reunion(p3, p4));
	FA::StatePair p6(reparser.rerange(9, 9));
	FA::StatePair p7(reparser.reunion(p5, p6));
	reparser.convert(p7);
	reparser.defineAs("WS");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p8(reparser.rerange(65, 70));
	FA::StatePair p9(reparser.rerange(97, 102));
	FA::StatePair p10(reparser.reunion(p8, p9));
	FA::StatePair p11(reparser.rerange(48, 57));
	FA::StatePair p12(reparser.reunion(p10, p11));
	reparser.convert(p12);
	reparser.defineAs("HEX");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p13(reparser.rerange(32, 65533));
	FA::StatePair p14(reparser.rerange(92, 92));
	FA::StatePair p15(reparser.recomplement(p13, p14));
	FA::StatePair p16(reparser.rerange(92, 92));
	FA::StatePair p17(reparser.rerange(48, 48));
	FA::StatePair p18(reparser.rerange(48, 55));
	FA::StatePair p19(reparser.quantified(p18, REParser::Quantifier(3,3)));
	FA::StatePair p20(reparser.reoptional(p19));
	FA::StatePair p21(reparser.reconcat(p17, p20));
	FA::StatePair p22(reparser.rerange(49, 49));
	FA::StatePair p23(reparser.rerange(48, 55));
	FA::StatePair p24(reparser.quantified(p23, REParser::Quantifier(1,2)));
	FA::StatePair p25(reparser.reconcat(p22, p24));
	FA::StatePair p26(reparser.reunion(p21, p25));
	FA::StatePair p27(reparser.rerange(50, 55));
	FA::StatePair p28(reparser.rerange(48, 55));
	FA::StatePair p29(reparser.reoptional(p28));
	FA::StatePair p30(reparser.reconcat(p27, p29));
	FA::StatePair p31(reparser.reunion(p26, p30));
	FA::StatePair p32(reparser.rerange(32, 127));
	FA::StatePair p33(reparser.reunion(p31, p32));
	FA::StatePair p34(reparser.rerange(117, 117));
	FA::StatePair p35(reparser.rerange(120, 120));
	FA::StatePair p36(reparser.reunion(p34, p35));
	FA::StatePair p37(reparser.reinsert("HEX"));
	FA::StatePair p38(reparser.reconcat(p36, p37));
	FA::StatePair p39(reparser.reinsert("HEX"));
	FA::StatePair p40(reparser.reconcat(p38, p39));
	FA::StatePair p41(reparser.reinsert("HEX"));
	FA::StatePair p42(reparser.reconcat(p40, p41));
	FA::StatePair p43(reparser.reinsert("HEX"));
	FA::StatePair p44(reparser.reconcat(p42, p43));
	FA::StatePair p45(reparser.reunion(p33, p44));
	FA::StatePair p46(reparser.reconcat(p16, p45));
	FA::StatePair p47(reparser.reunion(p15, p46));
	reparser.convert(p47);
	reparser.defineAs("ALL");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p48(reparser.rerange(95, 95));
	FA::StatePair p49(reparser.rerange(97, 122));
	FA::StatePair p50(reparser.reunion(p48, p49));
	FA::StatePair p51(reparser.rerange(65, 90));
	FA::StatePair p52(reparser.reunion(p50, p51));
	reparser.convert(p52);
	reparser.defineAs("IDCHAR");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p53(reparser.rerange(48, 57));
	reparser.convert(p53);
	reparser.defineAs("DIGIT");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p54(reparser.reinsert("ALL"));
	FA::StatePair p55(reparser.rerange(34, 34));
	FA::StatePair p56(reparser.recomplement(p54, p55));
	reparser.convert(p56);
	reparser.defineAs("STRINGCHAR");
	parser.defineTerminal("STRING", "Parser::String", "\"?\"");
	parser.defineTerminal("IDENTIFIER", "Parser::String", "\"?\"");
	parser.defineTerminal("INTEGER", "int", "0");
	parser.defineTerminal("SIGNED", "Parser::String", "\"0\"");
	parser.defineTerminal("FLOAT", "Parser::String", "\"0.0\"");
	parser.defineTerminal("REGEXP", "Parser::String", "\"/\\\\?/\"");
	parser.addAnonPattern(QSet<QString>(), "\";\"", "\";\"");
	parser.addPattern(QSet<QString>(), "[ \\t]", "dump");
	parser.addPattern(QSet<QString>(), "\\n\\r?", "dump");
	parser.addPattern(QSet<QString>(), "\"//\"({ALL}|\\t)*\\n\\r?", "dump");
	parser.addPattern(QSet<QString>(), "\"/*\"\\/*(((({ALL}|{WS})-[*/])+\\/*)|\\*+)*\"*/\"", "dump");
	parser.addAnonPattern(QSet<QString>(), "\"#include\"", "\"#include\"");
	parser.addAnonPattern(QSet<QString>(), "\"#option\"", "\"#option\"");
	parser.addAnonPattern(QSet<QString>(), "\"#enable\"", "\"#enable\"");
	parser.addAnonPattern(QSet<QString>(), "\"<\"", "\"<\"");
	parser.addAnonPattern(QSet<QString>(), "\">\"", "\">\"");
	parser.addAnonPattern(QSet<QString>(), "\"*\"", "\"*\"");
	parser.addAnonPattern(QSet<QString>(), "\",\"", "\",\"");
	parser.addAnonPattern(QSet<QString>(), "\".\"", "\".\"");
	parser.addAnonPattern(QSet<QString>(), "\":\"", "\":\"");
	parser.addAnonPattern(QSet<QString>(), "\"|\"", "\"|\"");
	parser.addAnonPattern(QSet<QString>(), "\"(\"", "\"(\"");
	parser.addAnonPattern(QSet<QString>(), "\")\"", "\")\"");
	parser.addAnonPattern(QSet<QString>(), "\":=\"", "\":=\"");
	parser.addAnonPattern(QSet<QString>(), "\"::\"", "\"::\"");
	parser.addAnonPattern(QSet<QString>(), "\"$\"", "\"$\"");
	parser.addAnonPattern(QSet<QString>(), "\"const\"", "\"const\"");
	parser.addAnonPattern(QSet<QString>(), "\"unsigned\"", "\"unsigned\"");
	parser.addAnonPattern(QSet<QString>(), "\"char\"", "\"char\"");
	parser.addAnonPattern(QSet<QString>(), "\"short\"", "\"short\"");
	parser.addAnonPattern(QSet<QString>(), "\"int\"", "\"int\"");
	parser.addAnonPattern(QSet<QString>(), "\"long\"", "\"long\"");
	parser.addAnonPattern(QSet<QString>(), "\"float\"", "\"float\"");
	parser.addAnonPattern(QSet<QString>(), "\"double\"", "\"double\"");
	parser.addAnonPattern(QSet<QString>(), "\"bool\"", "\"bool\"");
	parser.addAnonPattern(QSet<QString>(), "\"void\"", "\"void\"");
	parser.addAnonPattern(QSet<QString>(), "\"true\"", "\"true\"");
	parser.addAnonPattern(QSet<QString>(), "\"false\"", "\"false\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\"\\\"\"", "\"\\\"\\\"\"");
	parser.addPattern(QSet<QString>(), "\\\"{STRINGCHAR}+\\\"", "appendString");
	parser.addPattern(QSet<QString>(), "{IDCHAR}({IDCHAR}|{DIGIT})*", "appendIdentifier");
	parser.addPattern(QSet<QString>(), "[1-9]{DIGIT}*", "appendInteger");
	parser.addPattern(QSet<QString>(), "([+\\-][1-9]{DIGIT}*)|0", "appendSigned");
	parser.addPattern(QSet<QString>(), "\\-?(({DIGIT}+(\\.{DIGIT}*)?)|(\\.{DIGIT}+))([Ee][\\-+]{DIGIT}+)?", "appendFloat");
	parser.addPattern(QSet<QString>(), "\"/\"(({ALL}-[\"/\\[])|(\\\"{STRINGCHAR}+\\\")|(\\[({ALL}-\\])+\\]))+\"/\"", "appendRegExp");
	parser.declareProduction("goal", "");
	CFG::Shift s57(parser.createShift("includes_opt", CFG::Action()));
	CFG::Shift s58(parser.createShift("options_opt", CFG::Action()));
	CFG::Shift s59(parser.createShift("statements", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s57<<s58<<s59, CFG::Action());
	parser.declareProduction("includes_opt", "");
	CFG::Shift s60(parser.createShift("includes", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s60, CFG::Action());
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("includes", "");
	CFG::Shift s61(parser.createShift("includes", CFG::Action()));
	CFG::Shift s62(parser.createShift("include", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s61<<s62, CFG::Action());
	CFG::Shift s63(parser.createShift("include", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s63, CFG::Action());
	parser.declareProduction("include", "");
	parser.lookupAnonPattern("\"#include\"");
	CFG::Shift s64(parser.createShift("\"#include\"", CFG::Action()));
	CFG::Shift s65(parser.createShift("STRING", CFG::Action()));
	const CFG::Arg r66(parser.createArg(2));
	CFG::Action a67(parser.createAction("include", QList<CFG::Arg>()<<r66));
	parser.addRightHandSide(QList<CFG::Shift>()<<s64<<s65, a67);
	parser.declareProduction("options_opt", "");
	CFG::Shift s68(parser.createShift("options", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s68, CFG::Action());
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("options", "");
	CFG::Shift s69(parser.createShift("options", CFG::Action()));
	CFG::Shift s70(parser.createShift("option", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s69<<s70, CFG::Action());
	CFG::Shift s71(parser.createShift("option", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s71, CFG::Action());
	parser.declareProduction("option", "");
	parser.lookupAnonPattern("\"#option\"");
	CFG::Shift s72(parser.createShift("\"#option\"", CFG::Action()));
	CFG::Shift s73(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Shift s74(parser.createShift("nsname", CFG::Action()));
	const CFG::Arg r75(parser.createArg(2));
	const CFG::Arg r76(parser.createArg(3));
	const CFG::Arg r77(parser.createArgMeta(1));
	CFG::Action a78(parser.createAction("setOption", QList<CFG::Arg>()<<r75<<r76<<r77));
	parser.addRightHandSide(QList<CFG::Shift>()<<s72<<s73<<s74, a78);
	parser.lookupAnonPattern("\"#enable\"");
	CFG::Shift s79(parser.createShift("\"#enable\"", CFG::Action()));
	CFG::Shift s80(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r81(parser.createArg(2));
	const CFG::Arg r82(parser.createArg("\"\""));
	const CFG::Arg r83(parser.createArgMeta(1));
	CFG::Action a84(parser.createAction("setOption", QList<CFG::Arg>()<<r81<<r82<<r83));
	parser.addRightHandSide(QList<CFG::Shift>()<<s79<<s80, a84);
	parser.declareProduction("nsname", "Parser::String");
	CFG::Shift s85(parser.createShift("nsname", CFG::Action()));
	parser.lookupAnonPattern("\"::\"");
	CFG::Shift s86(parser.createShift("\"::\"", CFG::Action()));
	CFG::Shift s87(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r88(parser.createArg(1));
	const CFG::Arg r89(parser.createArg(3));
	CFG::Action a90(parser.createAction("nsname", QList<CFG::Arg>()<<r88<<r89));
	parser.addRightHandSide(QList<CFG::Shift>()<<s85<<s86<<s87, a90);
	CFG::Shift s91(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Action a92;
	a92.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s91, a92);
	parser.declareProduction("statements", "");
	CFG::Shift s93(parser.createShift("statements", CFG::Action()));
	CFG::Shift s94(parser.createShift("statement", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s93<<s94, CFG::Action());
	CFG::Shift s95(parser.createShift("statement", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s95, CFG::Action());
	parser.declareProduction("statement", "");
	CFG::Shift s96(parser.createShift("definition", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s96, CFG::Action());
	CFG::Shift s97(parser.createShift("pattern", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s97, CFG::Action());
	CFG::Shift s98(parser.createShift("terminaldef", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s98, CFG::Action());
	CFG::Shift s99(parser.createShift("production", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s99, CFG::Action());
	parser.declareProduction("definition", "");
	CFG::Shift s100(parser.createShift("IDENTIFIER", CFG::Action()));
	parser.lookupAnonPattern("\":=\"");
	CFG::Shift s101(parser.createShift("\":=\"", CFG::Action()));
	CFG::Shift s102(parser.createShift("regexp", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s103(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r104(parser.createArg(1));
	const CFG::Arg r105(parser.createArg(3));
	const CFG::Arg r106(parser.createArgMeta(1));
	const CFG::Arg r107(parser.createArgMeta(3));
	CFG::Action a108(parser.createAction("define", QList<CFG::Arg>()<<r104<<r105<<r106<<r107));
	parser.addRightHandSide(QList<CFG::Shift>()<<s100<<s101<<s102<<s103, a108);
	parser.lookupAnonPattern("\".\"");
	CFG::Shift s109(parser.createShift("\".\"", CFG::Action()));
	parser.lookupAnonPattern("\":=\"");
	CFG::Shift s110(parser.createShift("\":=\"", CFG::Action()));
	CFG::Shift s111(parser.createShift("REGEXP", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s112(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r113(parser.createArg(1));
	const CFG::Arg r114(parser.createArg(3));
	CFG::Action a115(parser.createAction("define", QList<CFG::Arg>()<<r113<<r114));
	parser.addRightHandSide(QList<CFG::Shift>()<<s109<<s110<<s111<<s112, a115);
	parser.declareProduction("pattern", "");
	CFG::Shift s116(parser.createShift("startconditions_opt", CFG::Action()));
	CFG::Shift s117(parser.createShift("REGEXP", CFG::Action()));
	CFG::Shift s118(parser.createShift("identifier", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s119(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r120(parser.createArg(1));
	const CFG::Arg r121(parser.createArg(2));
	const CFG::Arg r122(parser.createArg(3));
	const CFG::Arg r123(parser.createArgMeta(2));
	CFG::Action a124(parser.createAction("addPattern", QList<CFG::Arg>()<<r120<<r121<<r122<<r123));
	parser.addRightHandSide(QList<CFG::Shift>()<<s116<<s117<<s118<<s119, a124);
	CFG::Shift s125(parser.createShift("startconditions_opt", CFG::Action()));
	CFG::Shift s126(parser.createShift("STRING", CFG::Action()));
	CFG::Shift s127(parser.createShift("identifier", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s128(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r129(parser.createArg(1));
	const CFG::Arg r130(parser.createArg(2));
	const CFG::Arg r131(parser.createArg(3));
	const CFG::Arg r132(parser.createArgMeta(2));
	CFG::Action a133(parser.createAction("addPattern", QList<CFG::Arg>()<<r129<<r130<<r131<<r132));
	parser.addRightHandSide(QList<CFG::Shift>()<<s125<<s126<<s127<<s128, a133);
	CFG::Shift s134(parser.createShift("startconditions_opt", CFG::Action()));
	CFG::Shift s135(parser.createShift("REGEXP", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s136(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r137(parser.createArg(1));
	const CFG::Arg r138(parser.createArg(2));
	const CFG::Arg r139(parser.createArg("\"\""));
	const CFG::Arg r140(parser.createArgMeta(2));
	CFG::Action a141(parser.createAction("addPattern", QList<CFG::Arg>()<<r137<<r138<<r139<<r140));
	parser.addRightHandSide(QList<CFG::Shift>()<<s134<<s135<<s136, a141);
	CFG::Shift s142(parser.createShift("startconditions_opt", CFG::Action()));
	CFG::Shift s143(parser.createShift("REGEXP", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s144(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s145(parser.createShift("literal", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s146(parser.createShift("\")\"", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s147(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r148(parser.createArg(1));
	const CFG::Arg r149(parser.createArg(2));
	const CFG::Arg r150(parser.createArg(4));
	const CFG::Arg r151(parser.createArgMeta(2));
	CFG::Action a152(parser.createAction("addAnonPattern", QList<CFG::Arg>()<<r148<<r149<<r150<<r151));
	parser.addRightHandSide(QList<CFG::Shift>()<<s142<<s143<<s144<<s145<<s146<<s147, a152);
	CFG::Shift s153(parser.createShift("startconditions_opt", CFG::Action()));
	CFG::Shift s154(parser.createShift("STRING", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s155(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r156(parser.createArg(1));
	const CFG::Arg r157(parser.createArg(2));
	const CFG::Arg r158(parser.createArg(2));
	const CFG::Arg r159(parser.createArgMeta(2));
	CFG::Action a160(parser.createAction("addAnonPattern", QList<CFG::Arg>()<<r156<<r157<<r158<<r159));
	parser.addRightHandSide(QList<CFG::Shift>()<<s153<<s154<<s155, a160);
	parser.declareProduction("startconditions_opt", "Parser::Cont<Parser::String>::Set");
	parser.lookupAnonPattern("\"<\"");
	CFG::Shift s161(parser.createShift("\"<\"", CFG::Action()));
	CFG::Shift s162(parser.createShift("startconditions", CFG::Action()));
	parser.lookupAnonPattern("\">\"");
	CFG::Shift s163(parser.createShift("\">\"", CFG::Action()));
	CFG::Action a164;
	a164.setPivot(2);
	parser.addRightHandSide(QList<CFG::Shift>()<<s161<<s162<<s163, a164);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("startconditions", "Parser::Cont<Parser::String>::Set");
	CFG::Shift s165(parser.createShift("startconditions", CFG::Action()));
	CFG::Shift s166(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r167(parser.createArg(1));
	const CFG::Arg r168(parser.createArg(2));
	CFG::Action a169(parser.createAction("insert", QList<CFG::Arg>()<<r167<<r168));
	a169.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s165<<s166, a169);
	CFG::Shift s170(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r171(parser.createArg(1));
	CFG::Action a172(parser.createAction("createSet", QList<CFG::Arg>()<<r171));
	parser.addRightHandSide(QList<CFG::Shift>()<<s170, a172);
	parser.declareProduction("terminaldef", "");
	CFG::Shift s173(parser.createShift("IDENTIFIER", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s174(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r175(parser.createArg(1));
	const CFG::Arg r176(parser.createArg("\"\""));
	const CFG::Arg r177(parser.createArg("\"\""));
	const CFG::Arg r178(parser.createArgMeta(1));
	CFG::Action a179(parser.createAction("defineTerminal", QList<CFG::Arg>()<<r175<<r176<<r177<<r178));
	parser.addRightHandSide(QList<CFG::Shift>()<<s173<<s174, a179);
	CFG::Shift s180(parser.createShift("typename", CFG::Action()));
	CFG::Shift s181(parser.createShift("IDENTIFIER", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s182(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r183(parser.createArg(2));
	const CFG::Arg r184(parser.createArg(1));
	const CFG::Arg r185(parser.createArg("\"\""));
	const CFG::Arg r186(parser.createArgMeta(2));
	CFG::Action a187(parser.createAction("defineTerminal", QList<CFG::Arg>()<<r183<<r184<<r185<<r186));
	parser.addRightHandSide(QList<CFG::Shift>()<<s180<<s181<<s182, a187);
	CFG::Shift s188(parser.createShift("typename", CFG::Action()));
	CFG::Shift s189(parser.createShift("IDENTIFIER", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s190(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s191(parser.createShift("literal", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s192(parser.createShift("\")\"", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s193(parser.createShift("\";\"", CFG::Action()));
	const CFG::Arg r194(parser.createArg(2));
	const CFG::Arg r195(parser.createArg(1));
	const CFG::Arg r196(parser.createArg(4));
	const CFG::Arg r197(parser.createArgMeta(2));
	CFG::Action a198(parser.createAction("defineTerminal", QList<CFG::Arg>()<<r194<<r195<<r196<<r197));
	parser.addRightHandSide(QList<CFG::Shift>()<<s188<<s189<<s190<<s191<<s192<<s193, a198);
	parser.declareProduction("production", "");
	CFG::Shift s199(parser.createShift("head", CFG::Action()));
	parser.lookupAnonPattern("\":\"");
	CFG::Shift s200(parser.createShift("\":\"", CFG::Action()));
	CFG::Shift s201(parser.createShift("righthands", CFG::Action()));
	parser.lookupAnonPattern("\";\"");
	CFG::Shift s202(parser.createShift("\";\"", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s199<<s200<<s201<<s202, CFG::Action());
	parser.declareProduction("head", "");
	CFG::Shift s203(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r204(parser.createArg(1));
	const CFG::Arg r205(parser.createArg("\"\""));
	const CFG::Arg r206(parser.createArgMeta(1));
	CFG::Action a207(parser.createAction("declareProduction", QList<CFG::Arg>()<<r204<<r205<<r206));
	parser.addRightHandSide(QList<CFG::Shift>()<<s203, a207);
	CFG::Shift s208(parser.createShift("typename", CFG::Action()));
	CFG::Shift s209(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r210(parser.createArg(2));
	const CFG::Arg r211(parser.createArg(1));
	const CFG::Arg r212(parser.createArgMeta(2));
	CFG::Action a213(parser.createAction("declareProduction", QList<CFG::Arg>()<<r210<<r211<<r212));
	parser.addRightHandSide(QList<CFG::Shift>()<<s208<<s209, a213);
	parser.declareProduction("righthands", "");
	CFG::Shift s214(parser.createShift("righthands", CFG::Action()));
	parser.lookupAnonPattern("\"|\"");
	CFG::Shift s215(parser.createShift("\"|\"", CFG::Action()));
	CFG::Shift s216(parser.createShift("righthand", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s214<<s215<<s216, CFG::Action());
	CFG::Shift s217(parser.createShift("righthand", CFG::Action()));
	parser.addRightHandSide(QList<CFG::Shift>()<<s217, CFG::Action());
	parser.declareProduction("righthand", "");
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s218(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s219(parser.createShift("shifts_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s220(parser.createShift("\")\"", CFG::Action()));
	CFG::Shift s221(parser.createShift("action_opt", CFG::Action()));
	const CFG::Arg r222(parser.createArg(2));
	const CFG::Arg r223(parser.createArg(4));
	const CFG::Arg r224(parser.createArgMeta(2));
	CFG::Action a225(parser.createAction("addRightHandSide", QList<CFG::Arg>()<<r222<<r223<<r224));
	parser.addRightHandSide(QList<CFG::Shift>()<<s218<<s219<<s220<<s221, a225);
	parser.declareProduction("shifts_opt", "Parser::Cont<Parser::Shift>::List");
	CFG::Shift s226(parser.createShift("shifts", CFG::Action()));
	CFG::Action a227;
	a227.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s226, a227);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("shifts", "Parser::Cont<Parser::Shift>::List");
	CFG::Shift s228(parser.createShift("shifts", CFG::Action()));
	CFG::Shift s229(parser.createShift("shift", CFG::Action()));
	const CFG::Arg r230(parser.createArg(1));
	const CFG::Arg r231(parser.createArg(2));
	CFG::Action a232(parser.createAction("append", QList<CFG::Arg>()<<r230<<r231));
	a232.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s228<<s229, a232);
	CFG::Shift s233(parser.createShift("shift", CFG::Action()));
	const CFG::Arg r234(parser.createArg(1));
	CFG::Action a235(parser.createAction("createList", QList<CFG::Arg>()<<r234));
	parser.addRightHandSide(QList<CFG::Shift>()<<s233, a235);
	parser.declareProduction("shift", "Parser::Shift");
	CFG::Shift s236(parser.createShift("symbol", CFG::Action()));
	CFG::Shift s237(parser.createShift("shift_action_opt", CFG::Action()));
	const CFG::Arg r238(parser.createArg(1));
	const CFG::Arg r239(parser.createArg(2));
	CFG::Action a240(parser.createAction("createShift", QList<CFG::Arg>()<<r238<<r239));
	parser.addRightHandSide(QList<CFG::Shift>()<<s236<<s237, a240);
	parser.declareProduction("shift_action_opt", "Parser::Action");
	parser.lookupAnonPattern("\":\"");
	CFG::Shift s241(parser.createShift("\":\"", CFG::Action()));
	CFG::Shift s242(parser.createShift("call", CFG::Action()));
	CFG::Action a243;
	a243.setPivot(2);
	parser.addRightHandSide(QList<CFG::Shift>()<<s241<<s242, a243);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("symbol", "Parser::String");
	CFG::Shift s244(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Action a245;
	a245.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s244, a245);
	CFG::Shift s246(parser.createShift("regexp", CFG::Action()));
	const CFG::Arg r247(parser.createArg(1));
	const CFG::Arg r248(parser.createArgMeta(1));
	CFG::Action a249(parser.createAction("lookupAnonPattern", QList<CFG::Arg>()<<r247<<r248));
	a249.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s246, a249);
	parser.declareProduction("action_opt", "Parser::Action");
	parser.lookupAnonPattern("\":\"");
	CFG::Shift s250(parser.createShift("\":\"", CFG::Action()));
	CFG::Shift s251(parser.createShift("action", CFG::Action()));
	CFG::Action a252;
	a252.setPivot(2);
	parser.addRightHandSide(QList<CFG::Shift>()<<s250<<s251, a252);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("action", "Parser::Action");
	CFG::Shift s253(parser.createShift("call", CFG::Action()));
	CFG::Action a254;
	a254.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s253, a254);
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s255(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s256(parser.createShift("args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s257(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r258(parser.createArg(2));
	CFG::Action a259(parser.createAction("createAction", QList<CFG::Arg>()<<r258));
	parser.addRightHandSide(QList<CFG::Shift>()<<s255<<s256<<s257, a259);
	CFG::Shift s260(parser.createShift("INTEGER", CFG::Action()));
	CFG::Shift s261(parser.createShift("call_opt", CFG::Action()));
	const CFG::Arg r262(parser.createArg(1));
	const CFG::Arg r263(parser.createArg(2));
	CFG::Action a264(parser.createAction("createAction", QList<CFG::Arg>()<<r262<<r263));
	parser.addRightHandSide(QList<CFG::Shift>()<<s260<<s261, a264);
	parser.declareProduction("call_opt", "Parser::Action");
	CFG::Shift s265(parser.createShift("call", CFG::Action()));
	CFG::Action a266;
	a266.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s265, a266);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("call", "Parser::Action");
	CFG::Shift s267(parser.createShift("IDENTIFIER", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s268(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s269(parser.createShift("args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s270(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r271(parser.createArg(1));
	const CFG::Arg r272(parser.createArg(3));
	CFG::Action a273(parser.createAction("createAction", QList<CFG::Arg>()<<r271<<r272));
	parser.addRightHandSide(QList<CFG::Shift>()<<s267<<s268<<s269<<s270, a273);
	parser.declareProduction("args_opt", "Parser::Cont<Parser::Arg>::List");
	CFG::Shift s274(parser.createShift("args", CFG::Action()));
	CFG::Action a275;
	a275.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s274, a275);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("args", "Parser::Cont<Parser::Arg>::List");
	CFG::Shift s276(parser.createShift("args", CFG::Action()));
	parser.lookupAnonPattern("\",\"");
	CFG::Shift s277(parser.createShift("\",\"", CFG::Action()));
	CFG::Shift s278(parser.createShift("arg", CFG::Action()));
	const CFG::Arg r279(parser.createArg(1));
	const CFG::Arg r280(parser.createArg(3));
	CFG::Action a281(parser.createAction("append", QList<CFG::Arg>()<<r279<<r280));
	a281.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s276<<s277<<s278, a281);
	CFG::Shift s282(parser.createShift("arg", CFG::Action()));
	const CFG::Arg r283(parser.createArg(1));
	CFG::Action a284(parser.createAction("createList", QList<CFG::Arg>()<<r283));
	parser.addRightHandSide(QList<CFG::Shift>()<<s282, a284);
	parser.declareProduction("arg", "Parser::Arg");
	CFG::Shift s285(parser.createShift("literal", CFG::Action()));
	const CFG::Arg r286(parser.createArg(1));
	CFG::Action a287(parser.createAction("createArg", QList<CFG::Arg>()<<r286));
	parser.addRightHandSide(QList<CFG::Shift>()<<s285, a287);
	CFG::Shift s288(parser.createShift("INTEGER", CFG::Action()));
	const CFG::Arg r289(parser.createArg(1));
	CFG::Action a290(parser.createAction("createArg", QList<CFG::Arg>()<<r289));
	parser.addRightHandSide(QList<CFG::Shift>()<<s288, a290);
	parser.lookupAnonPattern("\"$\"");
	CFG::Shift s291(parser.createShift("\"$\"", CFG::Action()));
	CFG::Shift s292(parser.createShift("INTEGER", CFG::Action()));
	const CFG::Arg r293(parser.createArg(2));
	CFG::Action a294(parser.createAction("createArgMeta", QList<CFG::Arg>()<<r293));
	parser.addRightHandSide(QList<CFG::Shift>()<<s291<<s292, a294);
	parser.declareProduction("literal", "Parser::String");
	CFG::Shift s295(parser.createShift("SIGNED", CFG::Action()));
	CFG::Action a296;
	a296.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s295, a296);
	CFG::Shift s297(parser.createShift("FLOAT", CFG::Action()));
	CFG::Action a298;
	a298.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s297, a298);
	CFG::Shift s299(parser.createShift("nsname", CFG::Action()));
	const CFG::Arg r300(parser.createArg(1));
	CFG::Action a301(parser.createAction("nameLiteral", QList<CFG::Arg>()<<r300));
	parser.addRightHandSide(QList<CFG::Shift>()<<s299, a301);
	CFG::Shift s302(parser.createShift("STRING", CFG::Action()));
	CFG::Action a303;
	a303.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s302, a303);
	parser.lookupAnonPattern("\"\\\"\\\"\"");
	CFG::Shift s304(parser.createShift("\"\\\"\\\"\"", CFG::Action()));
	CFG::Action a305;
	a305.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s304, a305);
	parser.lookupAnonPattern("\"true\"");
	CFG::Shift s306(parser.createShift("\"true\"", CFG::Action()));
	CFG::Action a307;
	a307.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s306, a307);
	parser.lookupAnonPattern("\"false\"");
	CFG::Shift s308(parser.createShift("\"false\"", CFG::Action()));
	CFG::Action a309;
	a309.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s308, a309);
	parser.declareProduction("typename", "Parser::String");
	CFG::Shift s310(parser.createShift("mutable_pointer_type", CFG::Action()));
	CFG::Action a311;
	a311.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s310, a311);
	parser.lookupAnonPattern("\"void\"");
	CFG::Shift s312(parser.createShift("\"void\"", CFG::Action()));
	CFG::Action a313;
	a313.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s312, a313);
	parser.declareProduction("const_opt", "bool");
	parser.lookupAnonPattern("\"const\"");
	CFG::Shift s314(parser.createShift("\"const\"", CFG::Action()));
	const CFG::Arg r315(parser.createArg("true"));
	CFG::Action a316(parser.createAction("", QList<CFG::Arg>()<<r315));
	parser.addRightHandSide(QList<CFG::Shift>()<<s314, a316);
	const CFG::Arg r317(parser.createArg("false"));
	CFG::Action a318(parser.createAction("", QList<CFG::Arg>()<<r317));
	parser.addRightHandSide(QList<CFG::Shift>(), a318);
	parser.declareProduction("mutable_pointer_type", "Parser::String");
	CFG::Shift s319(parser.createShift("pointer_type", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s320(parser.createShift("\"*\"", CFG::Action()));
	const CFG::Arg r321(parser.createArg(1));
	const CFG::Arg r322(parser.createArg("false"));
	CFG::Action a323(parser.createAction("pointerType", QList<CFG::Arg>()<<r321<<r322));
	parser.addRightHandSide(QList<CFG::Shift>()<<s319<<s320, a323);
	CFG::Shift s324(parser.createShift("basic_type", CFG::Action()));
	CFG::Action a325;
	a325.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s324, a325);
	parser.declareProduction("pointer_type", "Parser::String");
	CFG::Shift s326(parser.createShift("pointer_type", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s327(parser.createShift("\"*\"", CFG::Action()));
	CFG::Shift s328(parser.createShift("const_opt", CFG::Action()));
	const CFG::Arg r329(parser.createArg(1));
	const CFG::Arg r330(parser.createArg(3));
	CFG::Action a331(parser.createAction("pointerType", QList<CFG::Arg>()<<r329<<r330));
	parser.addRightHandSide(QList<CFG::Shift>()<<s326<<s327<<s328, a331);
	CFG::Shift s332(parser.createShift("const_type", CFG::Action()));
	CFG::Action a333;
	a333.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s332, a333);
	parser.declareProduction("basic_type", "Parser::String");
	CFG::Shift s334(parser.createShift("template_type", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s335(parser.createShift("\"(\"", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s336(parser.createShift("\"*\"", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s337(parser.createShift("\")\"", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s338(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s339(parser.createShift("type_args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s340(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r341(parser.createArg(1));
	const CFG::Arg r342(parser.createArg(6));
	CFG::Action a343(parser.createAction("functionType", QList<CFG::Arg>()<<r341<<r342));
	parser.addRightHandSide(QList<CFG::Shift>()<<s334<<s335<<s336<<s337<<s338<<s339<<s340, a343);
	CFG::Shift s344(parser.createShift("template_type", CFG::Action()));
	CFG::Shift s345(parser.createShift("function_type", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s346(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s347(parser.createShift("type_args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s348(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r349(parser.createArg(1));
	const CFG::Arg r350(parser.createArg(2));
	const CFG::Arg r351(parser.createArg(4));
	CFG::Action a352(parser.createAction("functionType", QList<CFG::Arg>()<<r349<<r350<<r351));
	parser.addRightHandSide(QList<CFG::Shift>()<<s344<<s345<<s346<<s347<<s348, a352);
	CFG::Shift s353(parser.createShift("template_type", CFG::Action()));
	CFG::Action a354;
	a354.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s353, a354);
	parser.lookupAnonPattern("\"unsigned\"");
	CFG::Shift s355(parser.createShift("\"unsigned\"", CFG::Action()));
	CFG::Shift s356(parser.createShift("int_type", CFG::Action()));
	const CFG::Arg r357(parser.createArg(2));
	CFG::Action a358(parser.createAction("unsignedType", QList<CFG::Arg>()<<r357));
	parser.addRightHandSide(QList<CFG::Shift>()<<s355<<s356, a358);
	CFG::Shift s359(parser.createShift("int_type", CFG::Action()));
	CFG::Action a360;
	a360.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s359, a360);
	parser.lookupAnonPattern("\"unsigned\"");
	CFG::Shift s361(parser.createShift("\"unsigned\"", CFG::Action()));
	CFG::Action a362;
	a362.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s361, a362);
	parser.lookupAnonPattern("\"float\"");
	CFG::Shift s363(parser.createShift("\"float\"", CFG::Action()));
	CFG::Action a364;
	a364.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s363, a364);
	parser.lookupAnonPattern("\"double\"");
	CFG::Shift s365(parser.createShift("\"double\"", CFG::Action()));
	CFG::Action a366;
	a366.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s365, a366);
	parser.lookupAnonPattern("\"long\"");
	CFG::Shift s367(parser.createShift("\"long\"", CFG::Action()));
	parser.lookupAnonPattern("\"double\"");
	CFG::Shift s368(parser.createShift("\"double\"", CFG::Action()));
	const CFG::Arg r369(parser.createArg("\"long double\""));
	CFG::Action a370(parser.createAction("", QList<CFG::Arg>()<<r369));
	parser.addRightHandSide(QList<CFG::Shift>()<<s367<<s368, a370);
	parser.lookupAnonPattern("\"bool\"");
	CFG::Shift s371(parser.createShift("\"bool\"", CFG::Action()));
	CFG::Action a372;
	a372.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s371, a372);
	parser.declareProduction("template_type", "Parser::String");
	CFG::Shift s373(parser.createShift("template_type", CFG::Action()));
	parser.lookupAnonPattern("\"::\"");
	CFG::Shift s374(parser.createShift("\"::\"", CFG::Action()));
	CFG::Shift s375(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Shift s376(parser.createShift("template_args_opt", CFG::Action()));
	const CFG::Arg r377(parser.createArg(1));
	const CFG::Arg r378(parser.createArg(3));
	const CFG::Arg r379(parser.createArg(4));
	CFG::Action a380(parser.createAction("templateType", QList<CFG::Arg>()<<r377<<r378<<r379));
	parser.addRightHandSide(QList<CFG::Shift>()<<s373<<s374<<s375<<s376, a380);
	CFG::Shift s381(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Shift s382(parser.createShift("template_args_opt", CFG::Action()));
	const CFG::Arg r383(parser.createArg(1));
	const CFG::Arg r384(parser.createArg(2));
	CFG::Action a385(parser.createAction("templateType", QList<CFG::Arg>()<<r383<<r384));
	parser.addRightHandSide(QList<CFG::Shift>()<<s381<<s382, a385);
	parser.declareProduction("int_type", "Parser::String");
	parser.lookupAnonPattern("\"char\"");
	CFG::Shift s386(parser.createShift("\"char\"", CFG::Action()));
	CFG::Action a387;
	a387.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s386, a387);
	parser.lookupAnonPattern("\"short\"");
	CFG::Shift s388(parser.createShift("\"short\"", CFG::Action()));
	CFG::Action a389;
	a389.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s388, a389);
	parser.lookupAnonPattern("\"int\"");
	CFG::Shift s390(parser.createShift("\"int\"", CFG::Action()));
	CFG::Action a391;
	a391.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s390, a391);
	parser.lookupAnonPattern("\"long\"");
	CFG::Shift s392(parser.createShift("\"long\"", CFG::Action()));
	CFG::Action a393;
	a393.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s392, a393);
	parser.lookupAnonPattern("\"long\"");
	CFG::Shift s394(parser.createShift("\"long\"", CFG::Action()));
	parser.lookupAnonPattern("\"long\"");
	CFG::Shift s395(parser.createShift("\"long\"", CFG::Action()));
	const CFG::Arg r396(parser.createArg("\"long long\""));
	CFG::Action a397(parser.createAction("", QList<CFG::Arg>()<<r396));
	parser.addRightHandSide(QList<CFG::Shift>()<<s394<<s395, a397);
	parser.declareProduction("function_type", "Parser::String");
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s398(parser.createShift("\"(\"", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s399(parser.createShift("\"*\"", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s400(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s401(parser.createShift("type_args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s402(parser.createShift("\")\"", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s403(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r404(parser.createArg(4));
	CFG::Action a405(parser.createAction("functionType_rec", QList<CFG::Arg>()<<r404));
	parser.addRightHandSide(QList<CFG::Shift>()<<s398<<s399<<s400<<s401<<s402<<s403, a405);
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s406(parser.createShift("\"(\"", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s407(parser.createShift("\"*\"", CFG::Action()));
	CFG::Shift s408(parser.createShift("function_type", CFG::Action()));
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s409(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s410(parser.createShift("type_args_opt", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s411(parser.createShift("\")\"", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s412(parser.createShift("\")\"", CFG::Action()));
	const CFG::Arg r413(parser.createArg(3));
	const CFG::Arg r414(parser.createArg(5));
	CFG::Action a415(parser.createAction("functionType_rec", QList<CFG::Arg>()<<r413<<r414));
	parser.addRightHandSide(QList<CFG::Shift>()<<s406<<s407<<s408<<s409<<s410<<s411<<s412, a415);
	parser.declareProduction("template_args_opt", "Parser::Cont<Parser::String>::List");
	parser.lookupAnonPattern("\"<\"");
	CFG::Shift s416(parser.createShift("\"<\"", CFG::Action()));
	CFG::Shift s417(parser.createShift("type_args", CFG::Action()));
	parser.lookupAnonPattern("\">\"");
	CFG::Shift s418(parser.createShift("\">\"", CFG::Action()));
	CFG::Action a419;
	a419.setPivot(2);
	parser.addRightHandSide(QList<CFG::Shift>()<<s416<<s417<<s418, a419);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("type_args_opt", "Parser::Cont<Parser::String>::List");
	CFG::Shift s420(parser.createShift("type_args", CFG::Action()));
	CFG::Action a421;
	a421.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s420, a421);
	parser.addRightHandSide(QList<CFG::Shift>(), CFG::Action());
	parser.declareProduction("type_args", "Parser::Cont<Parser::String>::List");
	CFG::Shift s422(parser.createShift("type_args", CFG::Action()));
	parser.lookupAnonPattern("\",\"");
	CFG::Shift s423(parser.createShift("\",\"", CFG::Action()));
	CFG::Shift s424(parser.createShift("pointer_type", CFG::Action()));
	const CFG::Arg r425(parser.createArg(1));
	const CFG::Arg r426(parser.createArg(3));
	CFG::Action a427(parser.createAction("append", QList<CFG::Arg>()<<r425<<r426));
	a427.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s422<<s423<<s424, a427);
	CFG::Shift s428(parser.createShift("pointer_type", CFG::Action()));
	const CFG::Arg r429(parser.createArg(1));
	CFG::Action a430(parser.createAction("createList", QList<CFG::Arg>()<<r429));
	parser.addRightHandSide(QList<CFG::Shift>()<<s428, a430);
	parser.declareProduction("const_type", "Parser::String");
	parser.lookupAnonPattern("\"const\"");
	CFG::Shift s431(parser.createShift("\"const\"", CFG::Action()));
	CFG::Shift s432(parser.createShift("basic_type", CFG::Action()));
	const CFG::Arg r433(parser.createArg(2));
	CFG::Action a434(parser.createAction("constType", QList<CFG::Arg>()<<r433));
	parser.addRightHandSide(QList<CFG::Shift>()<<s431<<s432, a434);
	CFG::Shift s435(parser.createShift("basic_type", CFG::Action()));
	parser.lookupAnonPattern("\"const\"");
	CFG::Shift s436(parser.createShift("\"const\"", CFG::Action()));
	const CFG::Arg r437(parser.createArg(1));
	CFG::Action a438(parser.createAction("constType", QList<CFG::Arg>()<<r437));
	parser.addRightHandSide(QList<CFG::Shift>()<<s435<<s436, a438);
	CFG::Shift s439(parser.createShift("basic_type", CFG::Action()));
	CFG::Action a440;
	a440.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s439, a440);
	parser.declareProduction("regexp", "Parser::String");
	CFG::Shift s441(parser.createShift("STRING", CFG::Action()));
	CFG::Action a442;
	a442.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s441, a442);
	CFG::Shift s443(parser.createShift("REGEXP", CFG::Action()));
	CFG::Action a444;
	a444.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s443, a444);
	parser.declareProduction("identifier", "Parser::String");
	CFG::Shift s445(parser.createShift("IDENTIFIER", CFG::Action()));
	CFG::Action a446;
	a446.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s445, a446);
	parser.lookupAnonPattern("\"const\"");
	CFG::Shift s447(parser.createShift("\"const\"", CFG::Action()));
	CFG::Action a448;
	a448.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s447, a448);
	parser.lookupAnonPattern("\"unsigned\"");
	CFG::Shift s449(parser.createShift("\"unsigned\"", CFG::Action()));
	CFG::Action a450;
	a450.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s449, a450);
	parser.lookupAnonPattern("\"char\"");
	CFG::Shift s451(parser.createShift("\"char\"", CFG::Action()));
	CFG::Action a452;
	a452.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s451, a452);
	parser.lookupAnonPattern("\"short\"");
	CFG::Shift s453(parser.createShift("\"short\"", CFG::Action()));
	CFG::Action a454;
	a454.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s453, a454);
	parser.lookupAnonPattern("\"int\"");
	CFG::Shift s455(parser.createShift("\"int\"", CFG::Action()));
	CFG::Action a456;
	a456.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s455, a456);
	parser.lookupAnonPattern("\"float\"");
	CFG::Shift s457(parser.createShift("\"float\"", CFG::Action()));
	CFG::Action a458;
	a458.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s457, a458);
	parser.lookupAnonPattern("\"double\"");
	CFG::Shift s459(parser.createShift("\"double\"", CFG::Action()));
	CFG::Action a460;
	a460.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s459, a460);
	parser.lookupAnonPattern("\"bool\"");
	CFG::Shift s461(parser.createShift("\"bool\"", CFG::Action()));
	CFG::Action a462;
	a462.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s461, a462);
	parser.lookupAnonPattern("\"void\"");
	CFG::Shift s463(parser.createShift("\"void\"", CFG::Action()));
	CFG::Action a464;
	a464.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s463, a464);
	parser.lookupAnonPattern("\"true\"");
	CFG::Shift s465(parser.createShift("\"true\"", CFG::Action()));
	CFG::Action a466;
	a466.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s465, a466);
	parser.lookupAnonPattern("\"false\"");
	CFG::Shift s467(parser.createShift("\"false\"", CFG::Action()));
	CFG::Action a468;
	a468.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s467, a468);
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p469(reparser.restring(";"));
	reparser.convert(p469);
	(*(parser.patterns.begin()+0)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=1;
	FA::StatePair p470(reparser.rerange(32, 32));
	FA::StatePair p471(reparser.rerange(9, 9));
	FA::StatePair p472(reparser.reunion(p470, p471));
	reparser.convert(p472);
	(*(parser.patterns.begin()+1)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=2;
	FA::StatePair p473(reparser.rerange(10, 10));
	FA::StatePair p474(reparser.rerange(13, 13));
	FA::StatePair p475(reparser.reoptional(p474));
	FA::StatePair p476(reparser.reconcat(p473, p475));
	reparser.convert(p476);
	(*(parser.patterns.begin()+2)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=3;
	FA::StatePair p477(reparser.restring("//"));
	FA::StatePair p478(reparser.reinsert("ALL"));
	FA::StatePair p479(reparser.rerange(9, 9));
	FA::StatePair p480(reparser.reunion(p478, p479));
	FA::StatePair p481(reparser.reclosure(p480));
	FA::StatePair p482(reparser.reconcat(p477, p481));
	FA::StatePair p483(reparser.rerange(10, 10));
	FA::StatePair p484(reparser.reconcat(p482, p483));
	FA::StatePair p485(reparser.rerange(13, 13));
	FA::StatePair p486(reparser.reoptional(p485));
	FA::StatePair p487(reparser.reconcat(p484, p486));
	reparser.convert(p487);
	(*(parser.patterns.begin()+3)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=4;
	FA::StatePair p488(reparser.restring("/*"));
	FA::StatePair p489(reparser.rerange(47, 47));
	FA::StatePair p490(reparser.reclosure(p489));
	FA::StatePair p491(reparser.reconcat(p488, p490));
	FA::StatePair p492(reparser.reinsert("ALL"));
	FA::StatePair p493(reparser.reinsert("WS"));
	FA::StatePair p494(reparser.reunion(p492, p493));
	FA::StatePair p495(reparser.rerange(42, 42));
	FA::StatePair p496(reparser.rerange(47, 47));
	FA::StatePair p497(reparser.reunion(p495, p496));
	FA::StatePair p498(reparser.recomplement(p494, p497));
	FA::StatePair p499(reparser.repclosure(p498));
	FA::StatePair p500(reparser.rerange(47, 47));
	FA::StatePair p501(reparser.reclosure(p500));
	FA::StatePair p502(reparser.reconcat(p499, p501));
	FA::StatePair p503(reparser.rerange(42, 42));
	FA::StatePair p504(reparser.repclosure(p503));
	FA::StatePair p505(reparser.reunion(p502, p504));
	FA::StatePair p506(reparser.reclosure(p505));
	FA::StatePair p507(reparser.reconcat(p491, p506));
	FA::StatePair p508(reparser.restring("*/"));
	FA::StatePair p509(reparser.reconcat(p507, p508));
	reparser.convert(p509);
	(*(parser.patterns.begin()+4)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=5;
	FA::StatePair p510(reparser.restring("#include"));
	reparser.convert(p510);
	(*(parser.patterns.begin()+5)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=6;
	FA::StatePair p511(reparser.restring("#option"));
	reparser.convert(p511);
	(*(parser.patterns.begin()+6)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=7;
	FA::StatePair p512(reparser.restring("#enable"));
	reparser.convert(p512);
	(*(parser.patterns.begin()+7)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=8;
	FA::StatePair p513(reparser.restring("<"));
	reparser.convert(p513);
	(*(parser.patterns.begin()+8)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=9;
	FA::StatePair p514(reparser.restring(">"));
	reparser.convert(p514);
	(*(parser.patterns.begin()+9)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=10;
	FA::StatePair p515(reparser.restring("*"));
	reparser.convert(p515);
	(*(parser.patterns.begin()+10)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=11;
	FA::StatePair p516(reparser.restring(","));
	reparser.convert(p516);
	(*(parser.patterns.begin()+11)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=12;
	FA::StatePair p517(reparser.restring("."));
	reparser.convert(p517);
	(*(parser.patterns.begin()+12)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=13;
	FA::StatePair p518(reparser.restring(":"));
	reparser.convert(p518);
	(*(parser.patterns.begin()+13)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=14;
	FA::StatePair p519(reparser.restring("|"));
	reparser.convert(p519);
	(*(parser.patterns.begin()+14)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=15;
	FA::StatePair p520(reparser.restring("("));
	reparser.convert(p520);
	(*(parser.patterns.begin()+15)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=16;
	FA::StatePair p521(reparser.restring(")"));
	reparser.convert(p521);
	(*(parser.patterns.begin()+16)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=17;
	FA::StatePair p522(reparser.restring(":="));
	reparser.convert(p522);
	(*(parser.patterns.begin()+17)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=18;
	FA::StatePair p523(reparser.restring("::"));
	reparser.convert(p523);
	(*(parser.patterns.begin()+18)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=19;
	FA::StatePair p524(reparser.restring("$"));
	reparser.convert(p524);
	(*(parser.patterns.begin()+19)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=20;
	FA::StatePair p525(reparser.restring("const"));
	reparser.convert(p525);
	(*(parser.patterns.begin()+20)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=21;
	FA::StatePair p526(reparser.restring("unsigned"));
	reparser.convert(p526);
	(*(parser.patterns.begin()+21)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=22;
	FA::StatePair p527(reparser.restring("char"));
	reparser.convert(p527);
	(*(parser.patterns.begin()+22)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=23;
	FA::StatePair p528(reparser.restring("short"));
	reparser.convert(p528);
	(*(parser.patterns.begin()+23)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=24;
	FA::StatePair p529(reparser.restring("int"));
	reparser.convert(p529);
	(*(parser.patterns.begin()+24)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=25;
	FA::StatePair p530(reparser.restring("long"));
	reparser.convert(p530);
	(*(parser.patterns.begin()+25)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=26;
	FA::StatePair p531(reparser.restring("float"));
	reparser.convert(p531);
	(*(parser.patterns.begin()+26)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=27;
	FA::StatePair p532(reparser.restring("double"));
	reparser.convert(p532);
	(*(parser.patterns.begin()+27)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=28;
	FA::StatePair p533(reparser.restring("bool"));
	reparser.convert(p533);
	(*(parser.patterns.begin()+28)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=29;
	FA::StatePair p534(reparser.restring("void"));
	reparser.convert(p534);
	(*(parser.patterns.begin()+29)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=30;
	FA::StatePair p535(reparser.restring("true"));
	reparser.convert(p535);
	(*(parser.patterns.begin()+30)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=31;
	FA::StatePair p536(reparser.restring("false"));
	reparser.convert(p536);
	(*(parser.patterns.begin()+31)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=32;
	FA::StatePair p537(reparser.restring("\"\""));
	reparser.convert(p537);
	(*(parser.patterns.begin()+32)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=33;
	FA::StatePair p538(reparser.rerange(34, 34));
	FA::StatePair p539(reparser.reinsert("STRINGCHAR"));
	FA::StatePair p540(reparser.repclosure(p539));
	FA::StatePair p541(reparser.reconcat(p538, p540));
	FA::StatePair p542(reparser.rerange(34, 34));
	FA::StatePair p543(reparser.reconcat(p541, p542));
	reparser.convert(p543);
	(*(parser.patterns.begin()+33)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=34;
	FA::StatePair p544(reparser.reinsert("IDCHAR"));
	FA::StatePair p545(reparser.reinsert("IDCHAR"));
	FA::StatePair p546(reparser.reinsert("DIGIT"));
	FA::StatePair p547(reparser.reunion(p545, p546));
	FA::StatePair p548(reparser.reclosure(p547));
	FA::StatePair p549(reparser.reconcat(p544, p548));
	reparser.convert(p549);
	(*(parser.patterns.begin()+34)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=35;
	FA::StatePair p550(reparser.rerange(49, 57));
	FA::StatePair p551(reparser.reinsert("DIGIT"));
	FA::StatePair p552(reparser.reclosure(p551));
	FA::StatePair p553(reparser.reconcat(p550, p552));
	reparser.convert(p553);
	(*(parser.patterns.begin()+35)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=36;
	FA::StatePair p554(reparser.rerange(43, 43));
	FA::StatePair p555(reparser.rerange(45, 45));
	FA::StatePair p556(reparser.reunion(p554, p555));
	FA::StatePair p557(reparser.rerange(49, 57));
	FA::StatePair p558(reparser.reconcat(p556, p557));
	FA::StatePair p559(reparser.reinsert("DIGIT"));
	FA::StatePair p560(reparser.reclosure(p559));
	FA::StatePair p561(reparser.reconcat(p558, p560));
	FA::StatePair p562(reparser.rerange(48, 48));
	FA::StatePair p563(reparser.reunion(p561, p562));
	reparser.convert(p563);
	(*(parser.patterns.begin()+36)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=37;
	FA::StatePair p564(reparser.rerange(45, 45));
	FA::StatePair p565(reparser.reoptional(p564));
	FA::StatePair p566(reparser.reinsert("DIGIT"));
	FA::StatePair p567(reparser.repclosure(p566));
	FA::StatePair p568(reparser.rerange(46, 46));
	FA::StatePair p569(reparser.reinsert("DIGIT"));
	FA::StatePair p570(reparser.reclosure(p569));
	FA::StatePair p571(reparser.reconcat(p568, p570));
	FA::StatePair p572(reparser.reoptional(p571));
	FA::StatePair p573(reparser.reconcat(p567, p572));
	FA::StatePair p574(reparser.rerange(46, 46));
	FA::StatePair p575(reparser.reinsert("DIGIT"));
	FA::StatePair p576(reparser.repclosure(p575));
	FA::StatePair p577(reparser.reconcat(p574, p576));
	FA::StatePair p578(reparser.reunion(p573, p577));
	FA::StatePair p579(reparser.reconcat(p565, p578));
	FA::StatePair p580(reparser.rerange(69, 69));
	FA::StatePair p581(reparser.rerange(101, 101));
	FA::StatePair p582(reparser.reunion(p580, p581));
	FA::StatePair p583(reparser.rerange(45, 45));
	FA::StatePair p584(reparser.rerange(43, 43));
	FA::StatePair p585(reparser.reunion(p583, p584));
	FA::StatePair p586(reparser.reconcat(p582, p585));
	FA::StatePair p587(reparser.reinsert("DIGIT"));
	FA::StatePair p588(reparser.repclosure(p587));
	FA::StatePair p589(reparser.reconcat(p586, p588));
	FA::StatePair p590(reparser.reoptional(p589));
	FA::StatePair p591(reparser.reconcat(p579, p590));
	reparser.convert(p591);
	(*(parser.patterns.begin()+37)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=38;
	FA::StatePair p592(reparser.restring("/"));
	FA::StatePair p593(reparser.reinsert("ALL"));
	FA::StatePair p594(reparser.rerange(34, 34));
	FA::StatePair p595(reparser.rerange(47, 47));
	FA::StatePair p596(reparser.reunion(p594, p595));
	FA::StatePair p597(reparser.rerange(91, 91));
	FA::StatePair p598(reparser.reunion(p596, p597));
	FA::StatePair p599(reparser.recomplement(p593, p598));
	FA::StatePair p600(reparser.rerange(34, 34));
	FA::StatePair p601(reparser.reinsert("STRINGCHAR"));
	FA::StatePair p602(reparser.repclosure(p601));
	FA::StatePair p603(reparser.reconcat(p600, p602));
	FA::StatePair p604(reparser.rerange(34, 34));
	FA::StatePair p605(reparser.reconcat(p603, p604));
	FA::StatePair p606(reparser.reunion(p599, p605));
	FA::StatePair p607(reparser.rerange(91, 91));
	FA::StatePair p608(reparser.reinsert("ALL"));
	FA::StatePair p609(reparser.rerange(93, 93));
	FA::StatePair p610(reparser.recomplement(p608, p609));
	FA::StatePair p611(reparser.repclosure(p610));
	FA::StatePair p612(reparser.reconcat(p607, p611));
	FA::StatePair p613(reparser.rerange(93, 93));
	FA::StatePair p614(reparser.reconcat(p612, p613));
	FA::StatePair p615(reparser.reunion(p606, p614));
	FA::StatePair p616(reparser.repclosure(p615));
	FA::StatePair p617(reparser.reconcat(p592, p616));
	FA::StatePair p618(reparser.restring("/"));
	FA::StatePair p619(reparser.reconcat(p617, p618));
	reparser.convert(p619);
	(*(parser.patterns.begin()+38)).fa=reparser.result();
}

void Player::replay_re(Parser & parser) {
	REParser & reparser=parser.reparser;
	FA::StatePair p620(reparser.rerange(0, 65533));
	parser.include("\"REParser.h\"");
	parser.setOption("class", "REParser", 0);
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p621(reparser.rerange(65, 70));
	FA::StatePair p622(reparser.rerange(97, 102));
	FA::StatePair p623(reparser.reunion(p621, p622));
	FA::StatePair p624(reparser.rerange(48, 57));
	FA::StatePair p625(reparser.reunion(p623, p624));
	reparser.convert(p625);
	reparser.defineAs("HEX");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p626(reparser.rerange(32, 65533));
	FA::StatePair p627(reparser.rerange(92, 92));
	FA::StatePair p628(reparser.recomplement(p626, p627));
	FA::StatePair p629(reparser.rerange(92, 92));
	FA::StatePair p630(reparser.rerange(48, 48));
	FA::StatePair p631(reparser.rerange(48, 55));
	FA::StatePair p632(reparser.quantified(p631, REParser::Quantifier(3,3)));
	FA::StatePair p633(reparser.reoptional(p632));
	FA::StatePair p634(reparser.reconcat(p630, p633));
	FA::StatePair p635(reparser.rerange(49, 49));
	FA::StatePair p636(reparser.rerange(48, 55));
	FA::StatePair p637(reparser.quantified(p636, REParser::Quantifier(1,2)));
	FA::StatePair p638(reparser.reconcat(p635, p637));
	FA::StatePair p639(reparser.reunion(p634, p638));
	FA::StatePair p640(reparser.rerange(50, 55));
	FA::StatePair p641(reparser.rerange(48, 55));
	FA::StatePair p642(reparser.reoptional(p641));
	FA::StatePair p643(reparser.reconcat(p640, p642));
	FA::StatePair p644(reparser.reunion(p639, p643));
	FA::StatePair p645(reparser.rerange(32, 127));
	FA::StatePair p646(reparser.reunion(p644, p645));
	FA::StatePair p647(reparser.rerange(117, 117));
	FA::StatePair p648(reparser.rerange(120, 120));
	FA::StatePair p649(reparser.reunion(p647, p648));
	FA::StatePair p650(reparser.reinsert("HEX"));
	FA::StatePair p651(reparser.reconcat(p649, p650));
	FA::StatePair p652(reparser.reinsert("HEX"));
	FA::StatePair p653(reparser.reconcat(p651, p652));
	FA::StatePair p654(reparser.reinsert("HEX"));
	FA::StatePair p655(reparser.reconcat(p653, p654));
	FA::StatePair p656(reparser.reinsert("HEX"));
	FA::StatePair p657(reparser.reconcat(p655, p656));
	FA::StatePair p658(reparser.reunion(p646, p657));
	FA::StatePair p659(reparser.reconcat(p629, p658));
	FA::StatePair p660(reparser.reunion(p628, p659));
	reparser.convert(p660);
	reparser.defineAs("ALL");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p661(reparser.rerange(95, 95));
	FA::StatePair p662(reparser.rerange(97, 122));
	FA::StatePair p663(reparser.reunion(p661, p662));
	FA::StatePair p664(reparser.rerange(65, 90));
	FA::StatePair p665(reparser.reunion(p663, p664));
	reparser.convert(p665);
	reparser.defineAs("IDCHAR");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p666(reparser.rerange(48, 57));
	reparser.convert(p666);
	reparser.defineAs("DIGIT");
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p667(reparser.reinsert("ALL"));
	FA::StatePair p668(reparser.rerange(34, 34));
	FA::StatePair p669(reparser.recomplement(p667, p668));
	reparser.convert(p669);
	reparser.defineAs("STRINGCHAR");
	parser.addAnonPattern(QSet<QString>(), "\"|\"", "\"|\"");
	parser.addAnonPattern(QSet<QString>(), "\"*\"", "\"*\"");
	parser.addAnonPattern(QSet<QString>(), "\"+\"", "\"+\"");
	parser.addAnonPattern(QSet<QString>(), "\"?\"", "\"?\"");
	parser.addAnonPattern(QSet<QString>(), "\"(\"", "\"(\"");
	parser.addAnonPattern(QSet<QString>(), "\")\"", "\")\"");
	parser.addAnonPattern(QSet<QString>()<<"cc"<<"INITIAL", "\"-\"", "\"-\"");
	parser.addAnonPattern(QSet<QString>(), "\".\"", "\".\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\d\"", "\"\\\\d\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\D\"", "\"\\\\D\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\s\"", "\"\\\\s\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\S\"", "\"\\\\S\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\w\"", "\"\\\\w\"");
	parser.addAnonPattern(QSet<QString>(), "\"\\\\W\"", "\"\\\\W\"");
	parser.addPattern(QSet<QString>(), "\\[|\\[^", "beginCharacterClass");
	parser.addPattern(QSet<QString>(), "\\\"{STRINGCHAR}+\\\"", "pushString");
	parser.addPattern(QSet<QString>(), "{ALL}-[\"{}]", "pushCharacter");
	parser.addPattern(QSet<QString>(), "\\{{IDCHAR}({IDCHAR}|{DIGIT})*\\}", "pushIdentifier");
	parser.addPattern(QSet<QString>(), "\\{([1-9][0-9]*|[0-9]*,([1-9][0-9]*)?|,[1-9][0-9]*)\\}", "appendQuantifier");
	parser.addPattern(QSet<QString>()<<"cc", "\\]", "endCharacterClass");
	parser.addPattern(QSet<QString>()<<"cc", "{ALL}", "pushCharacter");
	parser.defineTerminal("CHARACTER", "int", "+32");
	parser.defineTerminal("IDENTIFIER", "REParser::String", "\"?\"");
	parser.defineTerminal("STRING", "REParser::String", "");
	parser.defineTerminal("CCBEGIN", "bool", "");
	parser.defineTerminal("CCEND", "void", "");
	parser.defineTerminal("QUANTIFIER", "REParser::Quantifier", "");
	parser.declareProduction("re", "");
	CFG::Shift s670(parser.createShift("reunion", CFG::Action()));
	const CFG::Arg r671(parser.createArg(1));
	CFG::Action a672(parser.createAction("convert", QList<CFG::Arg>()<<r671));
	parser.addRightHandSide(QList<CFG::Shift>()<<s670, a672);
	parser.declareProduction("reunion", "REParser::StatePair");
	CFG::Shift s673(parser.createShift("reunion", CFG::Action()));
	parser.lookupAnonPattern("\"|\"");
	CFG::Shift s674(parser.createShift("\"|\"", CFG::Action()));
	CFG::Shift s675(parser.createShift("reconcat", CFG::Action()));
	const CFG::Arg r676(parser.createArg(1));
	const CFG::Arg r677(parser.createArg(3));
	CFG::Action a678(parser.createAction("reunion", QList<CFG::Arg>()<<r676<<r677));
	parser.addRightHandSide(QList<CFG::Shift>()<<s673<<s674<<s675, a678);
	CFG::Shift s679(parser.createShift("reunion", CFG::Action()));
	parser.lookupAnonPattern("\"-\"");
	CFG::Shift s680(parser.createShift("\"-\"", CFG::Action()));
	CFG::Shift s681(parser.createShift("reconcat", CFG::Action()));
	const CFG::Arg r682(parser.createArg(1));
	const CFG::Arg r683(parser.createArg(3));
	CFG::Action a684(parser.createAction("recomplement", QList<CFG::Arg>()<<r682<<r683));
	parser.addRightHandSide(QList<CFG::Shift>()<<s679<<s680<<s681, a684);
	CFG::Shift s685(parser.createShift("reconcat", CFG::Action()));
	CFG::Action a686;
	a686.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s685, a686);
	parser.declareProduction("reconcat", "REParser::StatePair");
	CFG::Shift s687(parser.createShift("reconcat", CFG::Action()));
	CFG::Shift s688(parser.createShift("reclosure", CFG::Action()));
	const CFG::Arg r689(parser.createArg(1));
	const CFG::Arg r690(parser.createArg(2));
	CFG::Action a691(parser.createAction("reconcat", QList<CFG::Arg>()<<r689<<r690));
	parser.addRightHandSide(QList<CFG::Shift>()<<s687<<s688, a691);
	CFG::Shift s692(parser.createShift("reclosure", CFG::Action()));
	const CFG::Arg r693(parser.createArg(1));
	CFG::Action a694(parser.createAction("", QList<CFG::Arg>()<<r693));
	parser.addRightHandSide(QList<CFG::Shift>()<<s692, a694);
	parser.declareProduction("reclosure", "REParser::StatePair");
	CFG::Shift s695(parser.createShift("repar", CFG::Action()));
	parser.lookupAnonPattern("\"*\"");
	CFG::Shift s696(parser.createShift("\"*\"", CFG::Action()));
	const CFG::Arg r697(parser.createArg(1));
	CFG::Action a698(parser.createAction("reclosure", QList<CFG::Arg>()<<r697));
	parser.addRightHandSide(QList<CFG::Shift>()<<s695<<s696, a698);
	CFG::Shift s699(parser.createShift("repar", CFG::Action()));
	parser.lookupAnonPattern("\"+\"");
	CFG::Shift s700(parser.createShift("\"+\"", CFG::Action()));
	const CFG::Arg r701(parser.createArg(1));
	CFG::Action a702(parser.createAction("repclosure", QList<CFG::Arg>()<<r701));
	parser.addRightHandSide(QList<CFG::Shift>()<<s699<<s700, a702);
	CFG::Shift s703(parser.createShift("repar", CFG::Action()));
	parser.lookupAnonPattern("\"?\"");
	CFG::Shift s704(parser.createShift("\"?\"", CFG::Action()));
	const CFG::Arg r705(parser.createArg(1));
	CFG::Action a706(parser.createAction("reoptional", QList<CFG::Arg>()<<r705));
	parser.addRightHandSide(QList<CFG::Shift>()<<s703<<s704, a706);
	CFG::Shift s707(parser.createShift("repar", CFG::Action()));
	CFG::Shift s708(parser.createShift("QUANTIFIER", CFG::Action()));
	const CFG::Arg r709(parser.createArg(1));
	const CFG::Arg r710(parser.createArg(2));
	CFG::Action a711(parser.createAction("quantified", QList<CFG::Arg>()<<r709<<r710));
	parser.addRightHandSide(QList<CFG::Shift>()<<s707<<s708, a711);
	CFG::Shift s712(parser.createShift("repar", CFG::Action()));
	CFG::Action a713;
	a713.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s712, a713);
	parser.declareProduction("repar", "REParser::StatePair");
	parser.lookupAnonPattern("\"(\"");
	CFG::Shift s714(parser.createShift("\"(\"", CFG::Action()));
	CFG::Shift s715(parser.createShift("reunion", CFG::Action()));
	parser.lookupAnonPattern("\")\"");
	CFG::Shift s716(parser.createShift("\")\"", CFG::Action()));
	CFG::Action a717;
	a717.setPivot(2);
	parser.addRightHandSide(QList<CFG::Shift>()<<s714<<s715<<s716, a717);
	CFG::Shift s718(parser.createShift("reprimitive", CFG::Action()));
	CFG::Action a719;
	a719.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s718, a719);
	parser.declareProduction("reprimitive", "REParser::StatePair");
	CFG::Shift s720(parser.createShift("STRING", CFG::Action()));
	const CFG::Arg r721(parser.createArg(1));
	CFG::Action a722(parser.createAction("restring", QList<CFG::Arg>()<<r721));
	parser.addRightHandSide(QList<CFG::Shift>()<<s720, a722);
	CFG::Shift s723(parser.createShift("CHARACTER", CFG::Action()));
	const CFG::Arg r724(parser.createArg(1));
	CFG::Action a725(parser.createAction("rechar", QList<CFG::Arg>()<<r724));
	parser.addRightHandSide(QList<CFG::Shift>()<<s723, a725);
	CFG::Shift s726(parser.createShift("reclass", CFG::Action()));
	CFG::Action a727;
	a727.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s726, a727);
	CFG::Shift s728(parser.createShift("IDENTIFIER", CFG::Action()));
	const CFG::Arg r729(parser.createArg(1));
	CFG::Action a730(parser.createAction("reinsert", QList<CFG::Arg>()<<r729));
	parser.addRightHandSide(QList<CFG::Shift>()<<s728, a730);
	parser.lookupAnonPattern("\".\"");
	CFG::Shift s731(parser.createShift("\".\"", CFG::Action()));
	const CFG::Arg r732(parser.createArg(1));
	CFG::Action a733(parser.createAction("reinsert", QList<CFG::Arg>()<<r732));
	parser.addRightHandSide(QList<CFG::Shift>()<<s731, a733);
	CFG::Shift s734(parser.createShift("Predefined", CFG::Action()));
	const CFG::Arg r735(parser.createArg(1));
	CFG::Action a736(parser.createAction("reclass", QList<CFG::Arg>()<<r735));
	parser.addRightHandSide(QList<CFG::Shift>()<<s734, a736);
	parser.declareProduction("Predefined", "REParser::CharClass");
	parser.lookupAnonPattern("\"\\\\d\"");
	CFG::Shift s737(parser.createShift("\"\\\\d\"", CFG::Action()));
	const CFG::Arg r738(parser.createArg("REParser::Digit"));
	CFG::Action a739(parser.createAction("", QList<CFG::Arg>()<<r738));
	parser.addRightHandSide(QList<CFG::Shift>()<<s737, a739);
	parser.lookupAnonPattern("\"\\\\D\"");
	CFG::Shift s740(parser.createShift("\"\\\\D\"", CFG::Action()));
	const CFG::Arg r741(parser.createArg("REParser::NonDigit"));
	CFG::Action a742(parser.createAction("", QList<CFG::Arg>()<<r741));
	parser.addRightHandSide(QList<CFG::Shift>()<<s740, a742);
	parser.lookupAnonPattern("\"\\\\s\"");
	CFG::Shift s743(parser.createShift("\"\\\\s\"", CFG::Action()));
	const CFG::Arg r744(parser.createArg("REParser::Whitespace"));
	CFG::Action a745(parser.createAction("", QList<CFG::Arg>()<<r744));
	parser.addRightHandSide(QList<CFG::Shift>()<<s743, a745);
	parser.lookupAnonPattern("\"\\\\S\"");
	CFG::Shift s746(parser.createShift("\"\\\\S\"", CFG::Action()));
	const CFG::Arg r747(parser.createArg("REParser::NonWhitespace"));
	CFG::Action a748(parser.createAction("", QList<CFG::Arg>()<<r747));
	parser.addRightHandSide(QList<CFG::Shift>()<<s746, a748);
	parser.lookupAnonPattern("\"\\\\w\"");
	CFG::Shift s749(parser.createShift("\"\\\\w\"", CFG::Action()));
	const CFG::Arg r750(parser.createArg("REParser::WordChar"));
	CFG::Action a751(parser.createAction("", QList<CFG::Arg>()<<r750));
	parser.addRightHandSide(QList<CFG::Shift>()<<s749, a751);
	parser.lookupAnonPattern("\"\\\\W\"");
	CFG::Shift s752(parser.createShift("\"\\\\W\"", CFG::Action()));
	const CFG::Arg r753(parser.createArg("REParser::NonWordChar"));
	CFG::Action a754(parser.createAction("", QList<CFG::Arg>()<<r753));
	parser.addRightHandSide(QList<CFG::Shift>()<<s752, a754);
	parser.declareProduction("reclass", "REParser::StatePair");
	CFG::Shift s755(parser.createShift("CCBEGIN", CFG::Action()));
	CFG::Shift s756(parser.createShift("cclist", CFG::Action()));
	CFG::Shift s757(parser.createShift("CCEND", CFG::Action()));
	const CFG::Arg r758(parser.createArg(1));
	const CFG::Arg r759(parser.createArg(2));
	CFG::Action a760(parser.createAction("reclass", QList<CFG::Arg>()<<r758<<r759));
	parser.addRightHandSide(QList<CFG::Shift>()<<s755<<s756<<s757, a760);
	parser.declareProduction("cclist", "REParser::StatePair");
	CFG::Shift s761(parser.createShift("cclist", CFG::Action()));
	CFG::Shift s762(parser.createShift("ccprim", CFG::Action()));
	const CFG::Arg r763(parser.createArg(1));
	const CFG::Arg r764(parser.createArg(2));
	CFG::Action a765(parser.createAction("reunion", QList<CFG::Arg>()<<r763<<r764));
	parser.addRightHandSide(QList<CFG::Shift>()<<s761<<s762, a765);
	CFG::Shift s766(parser.createShift("ccprim", CFG::Action()));
	CFG::Action a767;
	a767.setPivot(1);
	parser.addRightHandSide(QList<CFG::Shift>()<<s766, a767);
	parser.declareProduction("ccprim", "REParser::StatePair");
	CFG::Shift s768(parser.createShift("CHARACTER", CFG::Action()));
	parser.lookupAnonPattern("\"-\"");
	CFG::Shift s769(parser.createShift("\"-\"", CFG::Action()));
	CFG::Shift s770(parser.createShift("CHARACTER", CFG::Action()));
	const CFG::Arg r771(parser.createArg(1));
	const CFG::Arg r772(parser.createArg(3));
	CFG::Action a773(parser.createAction("rerange", QList<CFG::Arg>()<<r771<<r772));
	parser.addRightHandSide(QList<CFG::Shift>()<<s768<<s769<<s770, a773);
	CFG::Shift s774(parser.createShift("CHARACTER", CFG::Action()));
	const CFG::Arg r775(parser.createArg(1));
	CFG::Action a776(parser.createAction("rechar", QList<CFG::Arg>()<<r775));
	parser.addRightHandSide(QList<CFG::Shift>()<<s774, a776);
	reparser.fa=FA();
	reparser.endmark=0;
	FA::StatePair p777(reparser.restring("|"));
	reparser.convert(p777);
	(*(parser.patterns.begin()+0)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=1;
	FA::StatePair p778(reparser.restring("*"));
	reparser.convert(p778);
	(*(parser.patterns.begin()+1)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=2;
	FA::StatePair p779(reparser.restring("+"));
	reparser.convert(p779);
	(*(parser.patterns.begin()+2)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=3;
	FA::StatePair p780(reparser.restring("?"));
	reparser.convert(p780);
	(*(parser.patterns.begin()+3)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=4;
	FA::StatePair p781(reparser.restring("("));
	reparser.convert(p781);
	(*(parser.patterns.begin()+4)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=5;
	FA::StatePair p782(reparser.restring(")"));
	reparser.convert(p782);
	(*(parser.patterns.begin()+5)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=6;
	FA::StatePair p783(reparser.restring("-"));
	reparser.convert(p783);
	(*(parser.patterns.begin()+6)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=7;
	FA::StatePair p784(reparser.restring("."));
	reparser.convert(p784);
	(*(parser.patterns.begin()+7)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=8;
	FA::StatePair p785(reparser.restring("\\d"));
	reparser.convert(p785);
	(*(parser.patterns.begin()+8)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=9;
	FA::StatePair p786(reparser.restring("\\D"));
	reparser.convert(p786);
	(*(parser.patterns.begin()+9)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=10;
	FA::StatePair p787(reparser.restring("\\s"));
	reparser.convert(p787);
	(*(parser.patterns.begin()+10)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=11;
	FA::StatePair p788(reparser.restring("\\S"));
	reparser.convert(p788);
	(*(parser.patterns.begin()+11)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=12;
	FA::StatePair p789(reparser.restring("\\w"));
	reparser.convert(p789);
	(*(parser.patterns.begin()+12)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=13;
	FA::StatePair p790(reparser.restring("\\W"));
	reparser.convert(p790);
	(*(parser.patterns.begin()+13)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=14;
	FA::StatePair p791(reparser.rerange(91, 91));
	FA::StatePair p792(reparser.rerange(91, 91));
	FA::StatePair p793(reparser.rerange(94, 94));
	FA::StatePair p794(reparser.reconcat(p792, p793));
	FA::StatePair p795(reparser.reunion(p791, p794));
	reparser.convert(p795);
	(*(parser.patterns.begin()+14)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=15;
	FA::StatePair p796(reparser.rerange(34, 34));
	FA::StatePair p797(reparser.reinsert("STRINGCHAR"));
	FA::StatePair p798(reparser.repclosure(p797));
	FA::StatePair p799(reparser.reconcat(p796, p798));
	FA::StatePair p800(reparser.rerange(34, 34));
	FA::StatePair p801(reparser.reconcat(p799, p800));
	reparser.convert(p801);
	(*(parser.patterns.begin()+15)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=16;
	FA::StatePair p802(reparser.reinsert("ALL"));
	FA::StatePair p803(reparser.rerange(34, 34));
	FA::StatePair p804(reparser.rerange(123, 123));
	FA::StatePair p805(reparser.reunion(p803, p804));
	FA::StatePair p806(reparser.rerange(125, 125));
	FA::StatePair p807(reparser.reunion(p805, p806));
	FA::StatePair p808(reparser.recomplement(p802, p807));
	reparser.convert(p808);
	(*(parser.patterns.begin()+16)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=17;
	FA::StatePair p809(reparser.rerange(123, 123));
	FA::StatePair p810(reparser.reinsert("IDCHAR"));
	FA::StatePair p811(reparser.reconcat(p809, p810));
	FA::StatePair p812(reparser.reinsert("IDCHAR"));
	FA::StatePair p813(reparser.reinsert("DIGIT"));
	FA::StatePair p814(reparser.reunion(p812, p813));
	FA::StatePair p815(reparser.reclosure(p814));
	FA::StatePair p816(reparser.reconcat(p811, p815));
	FA::StatePair p817(reparser.rerange(125, 125));
	FA::StatePair p818(reparser.reconcat(p816, p817));
	reparser.convert(p818);
	(*(parser.patterns.begin()+17)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=18;
	FA::StatePair p819(reparser.rerange(123, 123));
	FA::StatePair p820(reparser.rerange(49, 57));
	FA::StatePair p821(reparser.rerange(48, 57));
	FA::StatePair p822(reparser.reclosure(p821));
	FA::StatePair p823(reparser.reconcat(p820, p822));
	FA::StatePair p824(reparser.rerange(48, 57));
	FA::StatePair p825(reparser.reclosure(p824));
	FA::StatePair p826(reparser.rerange(44, 44));
	FA::StatePair p827(reparser.reconcat(p825, p826));
	FA::StatePair p828(reparser.rerange(49, 57));
	FA::StatePair p829(reparser.rerange(48, 57));
	FA::StatePair p830(reparser.reclosure(p829));
	FA::StatePair p831(reparser.reconcat(p828, p830));
	FA::StatePair p832(reparser.reoptional(p831));
	FA::StatePair p833(reparser.reconcat(p827, p832));
	FA::StatePair p834(reparser.reunion(p823, p833));
	FA::StatePair p835(reparser.rerange(44, 44));
	FA::StatePair p836(reparser.rerange(49, 57));
	FA::StatePair p837(reparser.reconcat(p835, p836));
	FA::StatePair p838(reparser.rerange(48, 57));
	FA::StatePair p839(reparser.reclosure(p838));
	FA::StatePair p840(reparser.reconcat(p837, p839));
	FA::StatePair p841(reparser.reunion(p834, p840));
	FA::StatePair p842(reparser.reconcat(p819, p841));
	FA::StatePair p843(reparser.rerange(125, 125));
	FA::StatePair p844(reparser.reconcat(p842, p843));
	reparser.convert(p844);
	(*(parser.patterns.begin()+18)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=19;
	FA::StatePair p845(reparser.rerange(93, 93));
	reparser.convert(p845);
	(*(parser.patterns.begin()+19)).fa=reparser.result();
	reparser.fa=FA();
	reparser.endmark=20;
	FA::StatePair p846(reparser.reinsert("ALL"));
	reparser.convert(p846);
	(*(parser.patterns.begin()+20)).fa=reparser.result();
}

//EOF
